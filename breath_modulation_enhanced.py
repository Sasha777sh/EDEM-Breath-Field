#!/usr/bin/env python3
"""
–¢–µ–Ω–µ–≤–æ–π –ö–æ–¥–µ—Ä: –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–∏–æ–º–æ–¥—É–ª—è—Ü–∏—è –∫–∞—Ç—É—à–∫–∏
–ó–∞—â–∏—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
"""

import numpy as np
import sounddevice as sd
import hashlib
import json
import time
from datetime import datetime
import os
from scipy import signal
from scipy.signal import butter, filtfilt

class BreathModulator:
    def __init__(self):
        self.fs = 44100
        self.freq = 432  # –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω
        self.duration = 60
        self.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.calibration_data = None
        self.protection_enabled = True
        
    def create_session_hash(self):
        """–°–æ–∑–¥–∞—ë–º —Ö–µ—à —Å–µ—Å—Å–∏–∏ –¥–ª—è –ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏–∏"""
        session_data = {
            'timestamp': self.session_id,
            'frequency': self.freq,
            'sample_rate': self.fs,
            'duration': self.duration
        }
        session_str = json.dumps(session_data, sort_keys=True)
        return hashlib.sha256(session_str.encode()).hexdigest()
    
    def calibrate_breath_pattern(self):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ–¥ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º –¥—ã—Ö–∞–Ω–∏—è"""
        print("üîß –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥—ã—Ö–∞–Ω–∏—è...")
        print("–î—ã—à–∏ —Å–ø–æ–∫–æ–π–Ω–æ 30 —Å–µ–∫—É–Ω–¥ —Ä—è–¥–æ–º —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        calibration = sd.rec(int(30 * self.fs), samplerate=self.fs, channels=1)
        sd.wait()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Ç–º
        breath_envelope = np.abs(calibration).reshape(-1)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è
        peaks, _ = signal.find_peaks(breath_envelope, distance=int(0.5 * self.fs))
        if len(peaks) > 0:
            breath_rate = len(peaks) / 30  # –¥—ã—Ö–∞–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
            self.calibration_data = {
                'breath_rate': breath_rate,
                'min_amplitude': np.percentile(breath_envelope, 10),
                'max_amplitude': np.percentile(breath_envelope, 90),
                'session_hash': self.create_session_hash()
            }
            print(f"‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∏—Ç–º: {breath_rate:.2f} –ì—Ü")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∏—Ç–º –¥—ã—Ö–∞–Ω–∏—è")
            return False
    
    def apply_protection_filters(self, audio_data):
        """–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–º–µ—Ö –∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏"""
        if not self.protection_enabled:
            return audio_data
            
        # –§–∏–ª—å—Ç—Ä –æ—Ç —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–º–µ—Ö (50/60 –ì—Ü)
        nyquist = self.fs / 2
        low_cutoff = 0.5  # —É–±–∏—Ä–∞–µ–º –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
        high_cutoff = 20  # —É–±–∏—Ä–∞–µ–º –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
        
        b, a = butter(4, [low_cutoff/nyquist, high_cutoff/nyquist], btype='band')
        filtered = filtfilt(b, a, audio_data)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞–º–ø–ª–∏—Ç—É–¥—ã
        max_amplitude = 0.8
        filtered = np.clip(filtered, -max_amplitude, max_amplitude)
        
        return filtered
    
    def modulate_with_breath(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥—É–ª—è—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π"""
        if not self.calibration_data:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É!")
            return
            
        print(f"üåä –ù–∞—á–∏–Ω–∞–µ–º –º–æ–¥—É–ª—è—Ü–∏—é... –°–µ—Å—Å–∏—è: {self.session_id}")
        print("–î—ã—à–∏ —Å–ø–æ–∫–æ–π–Ω–æ —Ä—è–¥–æ–º —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º...")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥—ã—Ö–∞–Ω–∏–µ
        breath = sd.rec(int(self.duration * self.fs), samplerate=self.fs, channels=1)
        sd.wait()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        breath_clean = self.apply_protection_filters(breath)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–≥–∏–±–∞—é—â—É—é –¥—ã—Ö–∞–Ω–∏—è
        envelope = np.abs(breath_clean).reshape(-1)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        min_amp = self.calibration_data['min_amplitude']
        max_amp = self.calibration_data['max_amplitude']
        envelope = np.interp(envelope, (min_amp, max_amp), (0.2, 1.0))
        
        # –°–æ–∑–¥–∞—ë–º –º–æ–¥—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        t = np.linspace(0, self.duration, len(envelope))
        signal_432 = np.sin(2 * np.pi * self.freq * t)
        modulated_signal = signal_432 * envelope
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        self.save_session_data(breath_clean, envelope, modulated_signal)
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
        print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
        sd.play(modulated_signal, self.fs)
        sd.wait()
        
        print("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def save_session_data(self, breath_data, envelope, signal):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        session_dir = f"breath_sessions/{self.session_id}"
        os.makedirs(session_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        np.save(f"{session_dir}/breath_raw.npy", breath_data)
        np.save(f"{session_dir}/envelope.npy", envelope)
        np.save(f"{session_dir}/modulated_signal.npy", signal)
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
        report = {
            'session_id': self.session_id,
            'timestamp': datetime.now().isoformat(),
            'calibration': self.calibration_data,
            'files': {
                'breath_raw.npy': self.calculate_file_hash(f"{session_dir}/breath_raw.npy"),
                'envelope.npy': self.calculate_file_hash(f"{session_dir}/envelope.npy"),
                'modulated_signal.npy': self.calculate_file_hash(f"{session_dir}/modulated_signal.npy")
            },
            'session_hash': self.create_session_hash()
        }
        
        with open(f"{session_dir}/session_report.json", 'w') as f:
            json.dump(report, f, indent=2)
        
        # –°–æ–∑–¥–∞—ë–º .sha256 —Ñ–∞–π–ª—ã
        for filename in ['breath_raw.npy', 'envelope.npy', 'modulated_signal.npy']:
            self.create_sha256_file(f"{session_dir}/{filename}")
        
        print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {session_dir}")
        print(f"üîê –•–µ—à —Å–µ—Å—Å–∏–∏: {self.create_session_hash()}")
    
    def calculate_file_hash(self, filepath):
        """–í—ã—á–∏—Å–ª—è–µ–º SHA256 —Ö–µ—à —Ñ–∞–π–ª–∞"""
        with open(filepath, 'rb') as f:
            return hashlib.sha256(f.read()).hexdigest()
    
    def create_sha256_file(self, filepath):
        """–°–æ–∑–¥–∞—ë–º .sha256 —Ñ–∞–π–ª –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        file_hash = self.calculate_file_hash(filepath)
        with open(f"{filepath}.sha256", 'w') as f:
            f.write(f"{file_hash}  {os.path.basename(filepath)}\n")

def main():
    print("üî• –¢–µ–Ω–µ–≤–æ–π –ö–æ–¥–µ—Ä: –ë–∏–æ–º–æ–¥—É–ª—è—Ü–∏—è –∫–∞—Ç—É—à–∫–∏")
    print("=" * 50)
    
    modulator = BreathModulator()
    
    # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞
    if modulator.calibrate_breath_pattern():
        # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è
        modulator.modulate_with_breath()
    else:
        print("‚ùå –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω.")

if __name__ == "__main__":
    main()
