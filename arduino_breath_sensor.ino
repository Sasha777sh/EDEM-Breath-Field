/*
 * –¢–µ–Ω–µ–≤–æ–π –ö–æ–¥–µ—Ä: Arduino –¥–∞—Ç—á–∏–∫ –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è –±–∏–æ–º–æ–¥—É–ª—è—Ü–∏–∏
 * –ó–∞—â–∏—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
 */

// –ü–∏–Ω –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è (MPX5010)
#define PRESSURE_PIN A0
// –ü–∏–Ω –¥–ª—è –®–ò–ú –≤—ã—Ö–æ–¥–∞ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–∏–ª–∏—Ç–µ–ª–µ–º)
#define PWM_PIN 9
// –ü–∏–Ω –¥–ª—è LED –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
#define LED_PIN 13

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
float min_pressure = 0.5;  // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–í)
float max_pressure = 4.5;  // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–í)
float min_pwm = 50;         // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –®–ò–ú (0-255)
float max_pwm = 200;        // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –®–ò–ú (0-255)

// –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
float max_voltage = 4.8;    // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞
bool protection_enabled = true;

// –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
struct CalibrationData {
  float baseline_pressure;
  float breath_amplitude;
  float breath_rate;
  bool calibrated;
};

CalibrationData calibration = {0, 0, 0, false};

// –ë—É—Ñ–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥—ã—Ö–∞–Ω–∏—è
float breath_buffer[100];
int buffer_index = 0;
bool buffer_full = false;

void setup() {
  Serial.begin(9600);
  pinMode(LED_PIN, OUTPUT);
  pinMode(PRESSURE_PIN, INPUT);
  pinMode(PWM_PIN, OUTPUT);
  
  Serial.println("üî• –¢–µ–Ω–µ–≤–æ–π –ö–æ–¥–µ—Ä: Arduino –¥–∞—Ç—á–∏–∫ –¥—ã—Ö–∞–Ω–∏—è");
  Serial.println("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞...");
  
  // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
  calibrate_sensor();
}

void loop() {
  if (!calibration.calibrated) {
    Serial.println("‚ùå –î–∞—Ç—á–∏–∫ –Ω–µ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω!");
    delay(1000);
    return;
  }
  
  // –ß–∏—Ç–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ
  float pressure_voltage = analogRead(PRESSURE_PIN) * (5.0 / 1023.0);
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
  if (protection_enabled && pressure_voltage > max_voltage) {
    Serial.println("‚ö†Ô∏è –ü–ï–†–ï–ì–†–£–ó–ö–ê! –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã...");
    digitalWrite(LED_PIN, HIGH);
    delay(100);
    digitalWrite(LED_PIN, LOW);
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
  breath_buffer[buffer_index] = pressure_voltage;
  buffer_index = (buffer_index + 1) % 100;
  if (buffer_index == 0) buffer_full = true;
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—ã—Ö–∞–Ω–∏–µ
  float breath_envelope = analyze_breath_pattern();
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –®–ò–ú
  int pwm_value = map_breath_to_pwm(breath_envelope);
  
  // –£–ø—Ä–∞–≤–ª—è–µ–º —É—Å–∏–ª–∏—Ç–µ–ª–µ–º
  analogWrite(PWM_PIN, pwm_value);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Serial (–¥–ª—è Python)
  send_breath_data(pressure_voltage, breath_envelope, pwm_value);
  
  delay(50); // 20 –ì—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
}

void calibrate_sensor() {
  Serial.println("–î—ã—à–∏ —Å–ø–æ–∫–æ–π–Ω–æ 10 —Å–µ–∫—É–Ω–¥...");
  
  float sum = 0;
  int samples = 0;
  
  for (int i = 0; i < 1000; i++) { // 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ 100 –ì—Ü
    float voltage = analogRead(PRESSURE_PIN) * (5.0 / 1023.0);
    sum += voltage;
    samples++;
    
    // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    if (i % 100 == 0) {
      digitalWrite(LED_PIN, HIGH);
      delay(50);
      digitalWrite(LED_PIN, LOW);
    }
    
    delay(10);
  }
  
  calibration.baseline_pressure = sum / samples;
  calibration.calibrated = true;
  
  Serial.print("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë–∞–∑–æ–≤–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: ");
  Serial.print(calibration.baseline_pressure);
  Serial.println(" –í");
  
  // –ú–∏–≥–∞–µ–º LED –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  for (int i = 0; i < 5; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}

float analyze_breath_pattern() {
  if (!buffer_full && buffer_index < 10) return 0;
  
  // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–º–∞—Ö –¥—ã—Ö–∞–Ω–∏—è
  float min_val = 5.0;
  float max_val = 0.0;
  
  int samples = buffer_full ? 100 : buffer_index;
  for (int i = 0; i < samples; i++) {
    if (breath_buffer[i] < min_val) min_val = breath_buffer[i];
    if (breath_buffer[i] > max_val) max_val = breath_buffer[i];
  }
  
  float amplitude = max_val - min_val;
  calibration.breath_amplitude = amplitude;
  
  return amplitude;
}

int map_breath_to_pwm(float breath_amplitude) {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –¥—ã—Ö–∞–Ω–∏—è
  float normalized = constrain(breath_amplitude, 0, 2.0); // –º–∞–∫—Å 2–í —Ä–∞–∑–º–∞—Ö
  normalized = normalized / 2.0; // 0-1
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –®–ò–ú —Å —É—á—ë—Ç–æ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
  int pwm = min_pwm + (normalized * (max_pwm - min_pwm));
  
  return constrain(pwm, min_pwm, max_pwm);
}

void send_breath_data(float pressure, float envelope, int pwm) {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è Python
  Serial.print("{\"pressure\":");
  Serial.print(pressure, 3);
  Serial.print(",\"envelope\":");
  Serial.print(envelope, 3);
  Serial.print(",\"pwm\":");
  Serial.print(pwm);
  Serial.print(",\"calibrated\":");
  Serial.print(calibration.calibrated ? "true" : "false");
  Serial.println("}");
}

void emergency_stop() {
  // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
  analogWrite(PWM_PIN, 0);
  digitalWrite(LED_PIN, HIGH);
  Serial.println("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!");
}
